var cartNoteTyping;

validateQty = function(t) {
	return (parseFloat(t) != parseInt(t) || isNaN(t)) && (t = 1), t
}, $(document).on("keydown", "[name=note]", function(t) {
	clearTimeout(cartNoteTyping)
}), $(document).on("keyup ", "[name=note]", function(t) {
	var a = $(this);
	clearTimeout(cartNoteTyping), cartNoteTyping = setTimeout(function() {
		var t = a.val();
		$.ajax({
			url: cartUpdateUrl,
			type: "POST",
			data: {
				note: t
			},
			dataType: "json",
			success: function(t) {}
		})
	}, 750)
}), window.location.pathname.indexOf("/cart") > -1 ? (function() {
	function shippingEstimates() {
		if (Shopify && Shopify.CountryProvinceSelector) {
			var t = document.getElementById("shippingCountry");
			if (!t) return !1;
			new Shopify.CountryProvinceSelector("shippingCountry", "shippingProvince", {
				hideElement: "shippingProvinceContainer"
			});
			setupEventListeners()
		}
	}

	function setupEventListeners() {
		var t = document.getElementById("getShippingEstimates");
		t && t.addEventListener("click", t => {
			t.preventDefault(), $("#ShippingWrapperResponse").html("").removeClass("success").removeClass("error").hide();
			var a = {};
			a.zip = jQuery("#shippingZip").val() || "", a.country = jQuery("#shippingCountry").val() || "", a.province = jQuery("#shippingProvince").val() || "", _getCartShippingRates(a)
		})
	}
	var _getCartShippingRates = function(t) {
			var a = {
				type: "POST",
				url: "/cart/shipping_rates.json",
				data: jQuery.param({
					shipping_address: t
				}),
				success: function(t) {
					_render(t.shipping_rates)
				},
				error: _onError
			};
			jQuery.ajax(a)
		},
		_fullMessagesFromErrors = function(t) {
			var a = [];
			return jQuery.each(t, function(t, e) {
				jQuery.each(e, function(t, e) {
					a.push(e)
				})
			}), a
		},
		_onError = function(XMLHttpRequest, textStatus) {
			var data = eval("(" + XMLHttpRequest.responseText + ")");
			feedback = _fullMessagesFromErrors(data).join(", ") + ".", $("#ShippingWrapperResponse").html('<p class="error-text">' + feedback + "</p>").addClass("error").show()
		},
		_render = function(t) {
			if (t && t.length > 0) {
				var a = '<p class="success-text">';
				t.forEach(function(t) {
					a += `<span><strong>${t.name}:</strong>${Shopify.formatMoney(100*t.price,moneyFormat)}</span>`
				}), a += "</p>", $("#ShippingWrapperResponse").html(a).addClass("success").show()
			} else $("#ShippingWrapperResponse").html('<p class="error-text">' + notAvailableLabel + "</p>").addClass("error").show()
		};
	setTimeout(function() {
		shippingEstimates()
	}, 500)
}(), changeCartItem = function(t, a) {
	var e = {
		type: "POST",
		url: cartChangeUrl,
		data: "quantity=" + a + "&line=" + t,
		dataType: "json",
		success: function(e) {
			if (0 == a && $('[name="updates[]"][data-line="' + t + '"]').closest("tr").remove(), 0 == e.item_count) $("[data-cart-form]").hide(), $("[data-cart-empty]").show(), $("[data-cart-count]").hide();
			else {
				$("[data-cart-count]").show();
				var r = e.items[t - 1];
				r && $('[name="updates[]"][data-line="' + t + '"]').val(r.quantity), cartPageUpdate(e)
			}
		},
		error: function(e, r) {
			jQuery.getJSON(cartUrl, function(e, r) {
				if (0 == a && $('[name="updates[]"][data-line="' + t + '"]').closest("tr").remove(), 0 == e.item_count) $("[data-cart-form]").hide(), $("[data-cart-empty]").show(), $("[data-cart-count]").hide();
				else {
					$("[data-cart-count]").show();
					var n = e.items[t - 1];
					n && $('[name="updates[]"][data-line="' + t + '"]').val(n.quantity), cartPageUpdate(e)
				}
			})
		}
	};
	jQuery.ajax(e)
}, $(document).on("click", ".line_item_change", function(t) {
	t.preventDefault();
	var a = $(this),
		e = a.data("line"),
		r = a.closest("tr"),
		n = a.siblings('input[name="updates[]"]');
	$("#cartItemError-" + e).html("");
	var i = parseInt(n.val().replace(/\D/g, ""));
	r.addClass("disabled"), r.closest('[data-cart-items]').addClass("disabled");
	i = validateQty(i);
	a.hasClass("quantity-up") ? i += 1 : (i -= 1, i <= 0 && (i = 0)), n.val(i), e && changeCartItem(e, i)
}), $(document).on("change", '[name="updates[]"]', function(t) {
	t.preventDefault();
	var a = $(this),
		e = a.data("line"),
		r = a.closest("tr"),
		n = parseInt(a.val().replace(/\D/g, ""));
	r.addClass("disabled"), r.closest('[data-cart-items]').addClass("disabled"), $("#cartItemError-" + e).html(""), n = validateQty(n), e && changeCartItem(e, n)
}), $(document).on("click", ".line_item_remove", function(t) {
	t.preventDefault();
	var a = $(this),
		e = a.closest("tr"),
		r = a.data("line");
	r && (e.addClass("disabled"), e.closest('[data-cart-items]').addClass("disabled"), changeCartItem(r, 0))
}), cartPageUpdate = function(t) {
	$.ajax({
		url: mainCartUrl,
		type: "GET",
		dataType: "html",
		success: function(a) {
			if ($("body").find("[data-cart-items]").html($(a).find("[data-cart-items]").html()),$("body").find("[data-cart-items]").removeClass('disabled'), 0 == t.item_count ? ($("[data-cart-count").hide(), $(".cart-section").find("a:first").trigger("focus")) : $("body").find("[data-cart-items]").find("a:first").trigger("focus"), $("[data-cart-item-count]").text(t.item_count), $("[data-cart-original-price]").text(Shopify.formatMoney(t.original_total_price, moneyFormat)), $("[data-cart-total-price]").text(Shopify.formatMoney(t.total_price, moneyFormat)), t.cart_level_discount_applications.length > 0) {
				var e = "";
				$.each(t.cart_level_discount_applications, function(t, a) {
					e += "<li data-cart-discount>Discount[" + a.title + "] <strong>-" + Shopify.formatMoney(a.total_allocated_amount, moneyFormat) + "</strong></li>"
				}), $("li[data-cart-discount]").remove(), $("li[data-cart-original]").removeClass("hidden"), $(e).insertAfter("li[data-cart-original]")
			} else $("li[data-cart-original]").addClass("hidden"), $("li[data-cart-discount]").remove()
		}
	})
}) : (changeItem = function(t, a, e) {
	$(document.body);
	var r = {
		type: "POST",
		url: cartChangeUrl,
		data: "quantity=" + a + "&line=" + t,
		dataType: "json",
		success: function(a) {
			0 == a.item_count ? $("[data-cart-count]").hide() : $("[data-cart-count]").show();
			var r = a.items[t - 1];
			r && $('.ajaxcart__qty-num[name="updates[]"][data-line="' + t + '"]').val(r.quantity), e(a)
		},
		error: function(t, a) {
			jQuery.getJSON(cartUrl, function(t, a) {
				e(t)
			})
		}
	};
	jQuery.ajax(r)
}, updateQuantity = function(t, a, e) {
	isUpdating = !0, setTimeout(function() {
		changeItem(t, a, e)
	}, 250)
}, buildCart = function(t, a) {
	0 === t.item_count ? $("[data-cart-count]").hide() : $("[data-cart-count]").show(), $("[data-drawer-body]").load(mainCartUrl + "?view=jsonData", function() {
      a && ($("body").addClass("yv_side_Drawer_open"), $(".wrapper-overlay").css({
			display: "block"
		}), $("[data-drawer-body]").find("a:first").trigger("focus"))
	})
}, $("body").on("click", ".Sd_addProduct", function(t) {
	t.preventDefault();
	let a = $(this),
		e = $(this).closest("form");
	a.hasClass("Sd_addProductSticky") && (e = jQuery("#" + a.attr("form"))), 0 == e.closest(".yv_side_drawer_wrapper").length && (focusElement = a);
	let r = e.closest(".shopify-section");
	r.find(".productErrors").hide().html(""), a.addClass("is-loading"), 0 == e.closest(".yv_side_drawer_wrapper").length && ($("[data-drawer-body]").html(preLoadLoadGif), $("body").find("[data-side-drawer]").attr("class", "yv_side_drawer_wrapper"), $("body").find("[data-drawer-title]").html(cartTitleLabel), $("body").find("[data-side-drawer]").attr("id", "mini__cart"), $("body").find("[data-side-drawer]").addClass("mini_cart")), parameter = {
		type: "POST",
		url: cartAddUrl,
		data: e.serialize(),
		dataType: "json",
		success: function(t) {
			e.closest(".yv_side_drawer_wrapper").length > 0 && ($("[data-drawer-body]").html(preLoadLoadGif), $("body").find("[data-side-drawer]").attr("class", "yv_side_drawer_wrapper"), $("body").find("[data-drawer-title]").html(cartTitleLabel), $("body").find("[data-side-drawer]").attr("id", "mini__cart"), $("body").find("[data-side-drawer]").addClass("mini_cart")), $("body").removeClass("quickview-open"), $("body").addClass("side_Drawer_open"), $(".yv_side_drawer_wrapper").focus(), jQuery.getJSON(cartUrl, function(t, e) {
				buildCart(t, !0), setTimeout(function() {
					a.removeClass("is-loading")
				}, 1e3)
			})
		},
		error: function(t, e) {
			if (focusElement = "", "function" == typeof errorCallback) errorCallback(t, e);
			else {
				let a = r.find(".productErrors");
				a.length > 0 && a.html(t.responseJSON.description).show()
			}
			setTimeout(function() {
				$(".Sd_addProductSticky").removeClass("is-loading"), a.removeClass("is-loading")
			}, 1e3)
		}
	}, jQuery.ajax(parameter)
}), $(document).on("click", ".quantity-button", function(t) {
	t.preventDefault();
	var a = $(this),
		e = a.closest(".media-link"),
		r = a.data("line"),
		n = a.closest(".quantity").find(".ajaxcart__qty-num"),
		i = n.val();
	e.addClass("disabled"), e.closest('.cart-items-wrapper').addClass("disabled"), i && (i = parseInt(i.replace(/\D/g, "")));
	i = validateQty(i);
	a.hasClass("ajaxcart__qty--plus") ? i += 1 : (i -= 1, i <= 0 && (i = 0)), n.val(i), r && updateQuantity(r, i, buildCart)
}), $(document).on("change", ".ajaxcart__qty-num", function(t) {
	t.preventDefault();
	var a = $(this),
		e = a.closest(".media-link"),
		r = a.data("line"),
		n = parseInt(a.val().replace(/\D/g, ""));
	e.addClass("disabled"), e.closest('.cart-items-wrapper').addClass("disabled");
	n = validateQty(n);
	r && updateQuantity(r, n, buildCart)
}), $("body").on("click", ".openCartDrawer", function(t) {
	t.preventDefault();
	let a = $(this);
	$("[data-drawer-body]").html(preLoadLoadGif), $("body").find("[data-drawer-title]").html(cartTitleLabel), $("body").find("[data-side-drawer]").attr("class", "yv_side_drawer_wrapper"), $("body").find("[data-side-drawer]").attr("id", "mini__cart").addClass("mini_cart"), $("body").addClass("side_Drawer_open"), jQuery.getJSON(cartUrl, function(t, e) {
		buildCart(t, !0), focusElement = a, $(document).find(".yv_side_drawer_wrapper").trigger("focus")
	})
}), $(document).on("click", ".sd_mini_removeproduct", function(t) {
	t.preventDefault();
	var a = $(this),
		e = a.closest(".media-link"),
		r = parseInt(a.attr("data-line"));
	e.addClass("disabled"), e.closest('.cart-items-wrapper').addClass("disabled"), r && updateQuantity(r, 0, buildCart)
}), $(document).on("click ", ".cartDrawerNote", function(t) {
	$(this).toggleClass("active");
	var a = $(this).siblings(".cartNoteContainer");
	a.slideToggle()
}));
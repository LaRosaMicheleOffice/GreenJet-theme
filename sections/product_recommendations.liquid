<div class="container">
  <div class="product-recommendations" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=10">
    {%- if recommendations.performed and recommendations.products_count > 0 -%}
      <div class="section-heading">
        <h5>{{ section.settings.heading }}</h5>
      </div>
    <div class="yv-recent-product-grid recommend" 
         data-desktop-only data-flickity-slider='{"wrapAround":false,
                                            "cellAlign": "left",
                                            "dragThreshold":true,
                                            "contain": true,
                                            "groupCells": true,
                                            "touchVerticalScroll": false,
                                            "prevNextButtons": true,
                                            "pageDots": false,
                                            "arrowShape":"M36.7,76.9c1.9,1.4,1.9,3.8,0,5.7c-0.6,0.6-1.6,0.9-2.8,0.9c-0.9,0-1.9-0.3-2.8-0.9L2.2,52.8 c-1.9-1.4-1.9-4.3,0-5.7L30,18.3c1.4-1.4,3.8-1.4,5.2,0c1.9,1.4,1.9,4.3,0,5.7L10.2,50L36.7,76.9z M95.2,46.2c1.9,0,3.8,1.9,3.8,4.3 c0,2.4-1.9,3.8-3.8,3.8H13c-2.4,0-3.8-1.4-3.8-3.8c0-2.4,1.4-4.3,3.8-4.3H95.2z"}' >
      {%- for product in recommendations.products -%}
      {%- assign productFormId = 'product-form-' | append : section.id -%}
      {% assign mainClass='small-product-card' %}
      {% render 'product-grid' product: product, productFormId : productFormId, productClasses: mainClass, hideRelated: true, hideQuickView: true, imageSize: '275x' %}
      {%- endfor -%}
      </div>
  {%- endif -%}
  </div>

</div>
   
  <script>
    
    const productRecommendationsSection = document.querySelector('.product-recommendations');
      const url = productRecommendationsSection.dataset.url;
  
      fetch(url)
        .then(response => response.text())
        .then(text => {
          const html = document.createElement('div');
          html.innerHTML = text;
          const recommendations = html.querySelector('.product-recommendations');
  
          if (recommendations && recommendations.innerHTML.trim().length) {
            productRecommendationsSection.innerHTML = recommendations.innerHTML;
          }
        })
        .catch(e => {
          console.error(e);
        });
    $(document).ready(function(){
      recommendedProductsSlider();
    })
    function recommendedProductsSlider(){
      var recomend = setInterval(function(){
        if($('.yv-recent-product-grid.recommend').length > 0 ){ 
          if(!($('.yv-recent-product-grid.recommend').hasClass('slick-initialized'))){
            if(window.innerWidth > 767){
              flickitySlider($('.yv-recent-product-grid.recommend'))
            }
            showMultipleOptions(); 
          }
          clearInterval(recomend);
        }
      },100)
      setTimeout(function(){
        clearInterval(recomend);
      },5000)
    }
  
    </script>
  {% schema %}
{
  "name": "t:sections.product_recommendations.name",
  "tag": "section",
  "class": "product-page-recommendations recent-product-section",
  "settings": [
    {
      "label": "t:sections.product_recommendations.settings.heading.label",
      "id": "heading",
      "type": "text",
      "default": "Recommended Products"
    }
  ]
}
{% endschema %}
  